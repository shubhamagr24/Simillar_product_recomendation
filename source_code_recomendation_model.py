# -*- coding: utf-8 -*-
"""Recomemdation_101

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ey1U6HUKavHMQwt8MAYwsahH77IDusMz
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

dataset_url = 'https://github.com/shubhamagr24/Simillar_product_recomendation/blob/main/Data%20Analysis%20Task.csv?raw=true'
from urllib.request import urlretrieve
urlretrieve(dataset_url, 'source_data.csv')

# loading the data from the csv file to apandas dataframe
df = pd.read_csv('/content/source_data.csv',low_memory=False)

df.columns

## need to reduce size for faster computation

df=df[::4]

df.reset_index(inplace = True)

df.info()

# selecting the relevant features for recommendation

selected_features = ['l1_category','l3_category','MRP','ordering_channel','item_gender']
print(selected_features)

df[selected_features].isna().sum()

"""Since we have Null values for gender we need to impute na with blank."""

df[selected_features] = df[selected_features].fillna('')

df[['l1_category','l3_category','MRP','ordering_channel','item_gender']]

# combining all the 5 selected features

combined_features = df['l1_category']+' '+df['l3_category']+' '+str(df['MRP'])+' '+df['ordering_channel']+' '+df['item_gender']

print(combined_features.head())

type(combined_features)

"""TF-IDF is an abbreviation for Term Frequency Inverse Document Frequency. This is very common algorithm to transform text into a meaningful representation of numbers which is used to fit machine algorithm for prediction."""

# converting the text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print((feature_vectors))

# getting the similarity scores using cosine similarity
similarity = cosine_similarity(feature_vectors)

print((similarity))

"""printing two similar product for some of the products"""

for a in  range(len(df)-11600):
  print('Selected Product--',df[df.index==a]['ProdName'].values[0])
  print('Recomended products are:')
  similarity_score = list(enumerate(similarity[a]))
  sorted_similar_product = sorted(similarity_score, key = lambda x:x[1], reverse = True) 
  i = 1
  for product in sorted_similar_product:
    if (i<3):
      index = product[0]
      if (df[df.index==a].ProdName.values[0]!=df[df.index==index].ProdName.values[0]) :
        product_from_index = df[df.index==index]['ProdName'].values[0]
        print(i, '.',product_from_index)
        i+=1